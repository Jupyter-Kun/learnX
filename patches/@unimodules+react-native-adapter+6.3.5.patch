diff --git a/node_modules/@unimodules/react-native-adapter/android/build.gradle b/node_modules/@unimodules/react-native-adapter/android/build.gradle
index e04f6d7..1fc4109 100644
--- a/node_modules/@unimodules/react-native-adapter/android/build.gradle
+++ b/node_modules/@unimodules/react-native-adapter/android/build.gradle
@@ -1,6 +1,6 @@
 apply plugin: 'com.android.library'
 apply plugin: 'kotlin-android'
-apply plugin: 'maven'
+apply plugin: 'maven-publish'

 // Import autolinking script
 apply from: "../scripts/autolinking.gradle"
@@ -23,27 +23,16 @@ buildscript {
   }
 }

-//Upload android library to maven with javadoc and android sources
-configurations {
-  deployerJars
-}
-
 //Creating sources with comments
 task androidSourcesJar(type: Jar) {
   classifier = 'sources'
   from android.sourceSets.main.java.srcDirs
 }

-//Put the androidSources and javadoc to the artifacts
-artifacts {
-  archives androidSourcesJar
-}
-
-uploadArchives {
-  repositories {
-    mavenDeployer {
-      configuration = configurations.deployerJars
-      repository(url: mavenLocal().url)
+publishing {
+  publications {
+    mavenLocal(MavenPublication) {
+      artifact androidSourcesJar
     }
   }
 }
diff --git a/node_modules/@unimodules/react-native-adapter/build/NativeModulesProxy.native.js b/node_modules/@unimodules/react-native-adapter/build/NativeModulesProxy.native.js
index fdcfaba..a3a72d1 100644
--- a/node_modules/@unimodules/react-native-adapter/build/NativeModulesProxy.native.js
+++ b/node_modules/@unimodules/react-native-adapter/build/NativeModulesProxy.native.js
@@ -20,8 +20,10 @@ if (NativeProxy) {
         //
         // On Android only {start,stop}Observing are called on the native module
         // and these should be exported as Expo methods.
-        NativeModulesProxy[moduleName].addListener = (...args) => NativeModules.UMReactNativeEventEmitter.addProxiedListener(moduleName, ...args);
-        NativeModulesProxy[moduleName].removeListeners = (...args) => NativeModules.UMReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);
+        if (NativeModules.UMReactNativeEventEmitter) {
+            NativeModulesProxy[moduleName].addListener = (...args) => NativeModules.UMReactNativeEventEmitter.addProxiedListener(moduleName, ...args);
+            NativeModulesProxy[moduleName].removeListeners = (...args) => NativeModules.UMReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);
+        }
     });
 }
 else {
