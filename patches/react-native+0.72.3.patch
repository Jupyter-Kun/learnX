diff --git a/node_modules/react-native/Libraries/Network/FormData.js b/node_modules/react-native/Libraries/Network/FormData.js
index d1ec811..91735c6 100644
--- a/node_modules/react-native/Libraries/Network/FormData.js
+++ b/node_modules/react-native/Libraries/Network/FormData.js
@@ -82,7 +82,9 @@ class FormData {
       // content type (cf. web Blob interface.)
       if (typeof value === 'object' && !Array.isArray(value) && value) {
         if (typeof value.name === 'string') {
-          headers['content-disposition'] += '; filename="' + value.name + '"';
+          headers['content-disposition'] += `; filename="${
+            value.name
+          }"; filename*=utf-8''${encodeURI(value.name)}`;
         }
         if (typeof value.type === 'string') {
           headers['content-type'] = value.type;
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/HeaderUtil.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/HeaderUtil.java
index 07485de..e26ee0c 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/HeaderUtil.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/HeaderUtil.java
@@ -7,14 +7,35 @@

 package com.facebook.react.modules.network;

+import java.lang.reflect.Method;
+import okhttp3.Headers;
+
 /**
- * The class purpose is to weaken too strict OkHttp restriction on http headers. See:
- * https://github.com/square/okhttp/issues/2016 Auth headers might have an Authentication
- * information. It is better to get 401 from the server in this case, rather than non descriptive
- * error as 401 could be handled to invalidate the wrong token in the client code.
+ * The class purpose is to provide compatibility among OkHttp versions on adding non-ascii header values.
+ *
+ * For v3.12.0 or higher, we can use the `addUnsafeAscii` method to add non-ascii header values.
+ * See: https://square.github.io/okhttp/changelogs/changelog_3x/#version-3120
+ * We need to use reflection to call this method, as it is not available in older versions.
+ * Remove reflection once the internal version of OkHttp is updated to v3.12.0 or higher.
+ *
+ * For other versions, we need to strip non-ascii header values.
+ * See: https://github.com/square/okhttp/issues/2016
+ * Auth headers might have an Authentication information. It is better to get 401 from the server
+ * in this case, rather than non descriptive error as 401 could be handled to invalidate the wrong
+ * token in the client code.
  */
 public class HeaderUtil {

+  public static Method addUnsafeNonAsciiMethod = null;
+
+  static {
+    try {
+      addUnsafeNonAsciiMethod = Headers.Builder.class.getMethod("addUnsafeNonAscii", String.class, String.class);
+    } catch (NoSuchMethodException e) {
+      // Ignore
+    }
+  }
+
   public static String stripHeaderName(String name) {
     StringBuilder builder = new StringBuilder(name.length());
     boolean modified = false;
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java
index 1c4b373..67fee12 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java
@@ -25,6 +25,7 @@ import com.facebook.react.common.network.OkHttpCallUtil;
 import com.facebook.react.module.annotations.ReactModule;
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -760,11 +761,24 @@ public final class NetworkingModule extends NativeNetworkingAndroidSpec {
         return null;
       }
       String headerName = HeaderUtil.stripHeaderName(header.getString(0));
-      String headerValue = HeaderUtil.stripHeaderValue(header.getString(1));
+      String headerValue = header.getString(1);
       if (headerName == null || headerValue == null) {
         return null;
       }
-      headersBuilder.add(headerName, headerValue);
+
+      if (HeaderUtil.addUnsafeNonAsciiMethod != null) {
+        try {
+          // Use reflection to call addUnsafeNonAscii because it's not available in
+          // older versions of OkHttp that are used internally.
+          HeaderUtil.addUnsafeNonAsciiMethod.invoke(headersBuilder, headerName, headerValue);
+        } catch (IllegalAccessException | InvocationTargetException e) {
+          // Stripping non-ascii characters is needed for the regular `add` method.
+          headersBuilder.add(headerName, HeaderUtil.stripHeaderValue(headerValue));
+        }
+      } else {
+        // Stripping non-ascii characters is needed for the regular `add` method.
+        headersBuilder.add(headerName, HeaderUtil.stripHeaderValue(headerValue));
+      }
     }
     if (headersBuilder.get(USER_AGENT_HEADER_NAME) == null && mDefaultUserAgent != null) {
       headersBuilder.add(USER_AGENT_HEADER_NAME, mDefaultUserAgent);
