diff --git a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/notifications/presentation/builders/ExpoNotificationBuilder.java b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/notifications/presentation/builders/ExpoNotificationBuilder.java
index 159e6eb..7fcb76a 100644
--- a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/notifications/presentation/builders/ExpoNotificationBuilder.java
+++ b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/notifications/presentation/builders/ExpoNotificationBuilder.java
@@ -2,6 +2,8 @@ package expo.modules.notifications.notifications.presentation.builders;

 import android.app.Notification;
 import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.provider.Settings;
@@ -9,6 +11,8 @@ import android.util.Log;

 import androidx.annotation.Nullable;
 import androidx.core.app.NotificationCompat;
+import androidx.core.content.ContextCompat;
+
 import expo.modules.notifications.notifications.enums.NotificationPriority;
 import expo.modules.notifications.notifications.interfaces.NotificationBuilder;
 import expo.modules.notifications.notifications.model.NotificationContent;
@@ -32,7 +36,21 @@ public class ExpoNotificationBuilder extends ChannelAwareNotificationBuilder {

   protected NotificationCompat.Builder createBuilder() {
     NotificationCompat.Builder builder = super.createBuilder();
-    builder.setSmallIcon(getContext().getApplicationInfo().icon);
+
+    try {
+      ApplicationInfo app = getContext().getPackageManager().getApplicationInfo(getContext().getPackageName(), PackageManager.GET_META_DATA);
+      Bundle bundle = app.metaData;
+
+      int icon = bundle.getInt("com.google.firebase.messaging.default_notification_icon");
+      int color = bundle.getInt("com.google.firebase.messaging.default_notification_color");
+
+      builder.setSmallIcon(icon);
+      builder.setColor(ContextCompat.getColor(getContext(), color));
+    }
+    catch (PackageManager.NameNotFoundException e) {
+
+    }
+
     builder.setPriority(getPriority());

     NotificationContent content = getNotificationContent();
diff --git a/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.m b/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.m
index ee774a4..3f8e658 100644
--- a/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.m
+++ b/node_modules/expo-notifications/ios/EXNotifications/Notifications/EXNotificationSerializer.m
@@ -117,11 +117,13 @@ + (NSDictionary *)serializedNotificationTrigger:(UNNotificationTrigger *)trigger
     serializedTrigger[@"repeats"] = @(trigger.repeats);
     UNCalendarNotificationTrigger *calendarTrigger = (UNCalendarNotificationTrigger *)trigger;
     serializedTrigger[@"dateComponents"] = [self serializedDateComponents:calendarTrigger.dateComponents];
+#if !(TARGET_OS_MACCATALYST)
   } else if ([trigger isKindOfClass:[UNLocationNotificationTrigger class]]) {
     serializedTrigger[@"type"] = @"location";
     serializedTrigger[@"repeats"] = @(trigger.repeats);
     UNLocationNotificationTrigger *locationTrigger = (UNLocationNotificationTrigger *)trigger;
     serializedTrigger[@"region"] = [self serializedRegion:locationTrigger.region];
+#endif
   } else if ([trigger isKindOfClass:[UNTimeIntervalNotificationTrigger class]]) {
     serializedTrigger[@"type"] = @"timeInterval";
     UNTimeIntervalNotificationTrigger *timeIntervalTrigger = (UNTimeIntervalNotificationTrigger *)trigger;
